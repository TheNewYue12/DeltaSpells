#Making Minecraft's UpgradeRecipe fields public for use in JEI integration
public net.minecraft.world.item.crafting.UpgradeRecipe f_44518_ # base
public net.minecraft.world.item.crafting.UpgradeRecipe f_44519_ # addition

#Making Minecraft's structure gen pools public for adding houses to village generation
public net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool f_210560_ # templates
public-f net.minecraft.world.level.levelgen.structure.pools.StructureTemplatePool f_210559_ # rawTemplates

# DamageSources
public net.minecraft.world.damagesource.DamageSources *()
protected net.minecraft.world.damagesource.DamageSource f_268569_ # causingEntity
protected net.minecraft.world.damagesource.DamageSource f_268595_ # directEntity

#unprivate level
public net.minecraft.world.entity.Entity f_19853_ # level

#Making the dispenser behavior map public so that we can save the old entry before overriding it
public net.minecraft.world.level.block.DispenserBlock f_52661_ #DISPENSER_REGISTRY

#Making PotionBrewing's addMix public so we can register our own recipes
public net.minecraft.world.item.alchemy.PotionBrewing m_43513_(Lnet/minecraft/world/item/alchemy/Potion;Lnet/minecraft/world/item/Item;Lnet/minecraft/world/item/alchemy/Potion;)V #addMix(Potion, Item, Potion)
public net.minecraft.world.item.alchemy.PotionBrewing f_43495_

#Making the loot table of a ranomized container public for debugging
public net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity f_59605_
public net.minecraft.server.MinecraftServer f_129744_

#Making the falling block parmeters public for more control over custom falling blocks
public net.minecraft.world.entity.item.FallingBlockEntity <init>(Lnet/minecraft/world/level/Level;DDDLnet/minecraft/world/level/block/state/BlockState;)V #constructor
public net.minecraft.world.entity.item.FallingBlockEntity f_31947_ #cancelDrop
public net.minecraft.world.entity.item.FallingBlockEntity f_31946_ #blockstate

#Making item particles (eating, tool breaking, etc) public so that the scroll can use the same particle code
public net.minecraft.world.entity.LivingEntity m_21060_(Lnet/minecraft/world/item/ItemStack;I)V
#Making shared flags publically settable
public net.minecraft.world.entity.LivingEntity m_21155_(IZ)V

public net.minecraft.client.renderer.FogRenderer f_234164_ #MOB_EFFECT_FOG
public net.minecraft.client.renderer.FogRenderer$MobEffectFogFunction #MobEffectFogFunction
public net.minecraft.client.renderer.FogRenderer$FogData #FogData

#Irons World Upgrader
public net.minecraft.world.level.chunk.storage.ChunkStorage f_63495_ #worker
public net.minecraft.world.level.chunk.storage.IOWorker f_63518_ #storage
public net.minecraft.world.level.chunk.storage.RegionFileStorage m_63711_(Lnet/minecraft/world/level/ChunkPos;)Lnet/minecraft/world/level/chunk/storage/RegionFile; #getRegionFile

# Makes public the 'makeExecutor' method in Util,
# accepting a String and returns an ExecutorService
public net.minecraft.Util m_137477_(Ljava/lang/String;)Ljava/util/concurrent/ExecutorService; #makeExecutor

# Makes public crossbow helper methods so we can use them too
public net.minecraft.world.item.CrossbowItem m_40945_(Lnet/minecraft/world/item/ItemStack;)F #getShootingPower
public net.minecraft.world.item.CrossbowItem m_40859_(Lnet/minecraft/world/entity/LivingEntity;Lnet/minecraft/world/item/ItemStack;)Z #tryLoadProjectiles

# Makes piglin ai public so we can utilize piglin ai...
public net.minecraft.world.entity.monster.piglin.PiglinAi m_34975_(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;)Ljava/util/Optional; #getAngerTarget
public net.minecraft.world.entity.monster.piglin.PiglinAi m_34924_(Lnet/minecraft/world/entity/monster/piglin/AbstractPiglin;Lnet/minecraft/world/entity/LivingEntity;)V #setAngerTarget